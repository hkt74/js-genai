name: Update docs

on:
  push:
    branches: [ 'main' ]

jobs:
  update-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x' 
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Generate documentation
        run: npm run docs-latest && npm run docs-stable
      - name: Check for documentation changes
        id: check_changes
        run: |
          PAGES_DIFF=$(git diff --quiet "origin/pages-only" HEAD -- "pages/")
          echo "pages diff: $PAGES_DIFF"
          if git diff --quiet "origin/pages-only" HEAD -- "pages/"; then
            echo "No documentation changes detected."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Documentation changes detected."
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
        shell: bash
      - name: Get latest commit SHA
        id: get_commit_sha
        run: |
          COMMIT_SHA=$(git log -1 --pretty=%H) # Get latest commit SHA (full hash)
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "Latest commit SHA: $COMMIT_SHA"
      # Step 5: Apply changes to pages-only branch if differences exist
      - name: Commit and Push Changes to pages-only
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          # Configure git user for the commit
          git config user.email "genai-sdk-bot@google.com" # Or your preferred bot email
          git config user.name "genai-sdk-bot"           # Or your preferred bot name

          # --- Prepare for Branch Switch ---
          # Discard any local modifications to TRACKED files made by the build
          echo "Resetting any local changes to tracked files..."
          git reset --hard HEAD
          # Remove any UNTRACKED files/directories generated by the build
          echo "Cleaning untracked files..."
          git clean -fd
          # --------------------------------

          # Switch to a local branch tracking origin/pages-only
          TARGET_BRANCH="pages-only"
          echo "Switching to local $TARGET_BRANCH branch based on remote state..."
          git checkout -B "$TARGET_BRANCH" "origin/$TARGET_BRANCH"

          # --- Apply the Generated Content ---
          # Remove the existing pages/ directory from the target branch state
          echo "Removing existing pages/ content from $TARGET_BRANCH..."
          git rm -rf --ignore-unmatch pages/

          # Checkout the generated pages/ directory from the source commit state
          # Use the SHA captured earlier to be precise, or origin/main if trigger is main
          SOURCE_COMMIT="${{ steps.get_commit_sha.outputs.commit_sha }}"
          echo "Checking out generated pages/ content from source commit ($SOURCE_COMMIT)..."
          git checkout "$SOURCE_COMMIT" -- pages/
          # ------------------------------------

          # Stage the newly checked-out pages/ directory
          echo "Staging new pages/ directory..."
          git add pages/

          # Commit the changes if any exist
          if ! git diff --staged --quiet; then
            echo "Changes staged, proceeding with commit..."
            COMMIT_MESSAGE="docs: Sync pages/ from source commit ${{ steps.get_commit_sha.outputs.commit_sha }} [skip ci]"
            echo "Commit message: $COMMIT_MESSAGE"
            git commit -m "$COMMIT_MESSAGE"

            # Force push the local target branch to the remote
            echo "Force pushing changes to origin/$TARGET_BRANCH..."
            git push --force origin "$TARGET_BRANCH"
            echo "Push successful."
          else
            echo "No effective changes staged after checkout. Skipping commit and push."
          fi
        shell: bash

      - name: Report No Changes
        if: steps.diff_check.outputs.has_changes == 'false'
        run: |
          echo "Generated pages/ directory is already in sync with origin/pages-only. No action needed."
        shell: bash
