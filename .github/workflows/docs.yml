name: Update docs test

on:
  push:
    branches: [ 'main' ]

jobs:
  update-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x' 
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Generate documentation
        run: npm run docs-latest && npm run docs-stable
      - name: Check for documentation changes
        id: check_changes
        run: |
          if git diff --quiet "origin/pages-only" HEAD -- "pages/"; then
            echo "No documentation changes detected."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Documentation changes detected."
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
        shell: bash
      - name: Get latest commit SHA
        id: get_commit_sha
        run: |
          COMMIT_SHA=$(git log -1 --pretty=%H) # Get latest commit SHA (full hash)
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "Latest commit SHA: $COMMIT_SHA"
      - name: Commit and Push to pages-only branch
        if: steps.check_changes.outputs.has_changes == 'true' # Only run if changes were detected
        run: |
          # Configure git user
          git config user.email "genai-sdk-bot@google.com"
          git config user.name "genai-sdk-bot"

          git checkout -B pages-only origin/pages-only

     
          echo "Removing existing pages/ content from local pages-only branch..."
          git rm -rf --ignore-unmatch pages/

          echo "Checking out generated pages/ content from origin/main state..."
          git checkout origin/main -- pages/
          # --- End Strategy ---

          # Stage the changes (the new pages/ directory)
          echo "Staging new pages/ directory..."
          git add pages/

          # Check if there are actual changes to commit
          if ! git diff --staged --quiet; then
            echo "Changes detected, proceeding with commit..."
            COMMIT_MESSAGE="docs: Update docs from main branch commit: ${{ steps.get_commit_sha.outputs.commit_sha }} [skip ci]"
            echo "Commit message: $COMMIT_MESSAGE"
            git commit -m "$COMMIT_MESSAGE"

            echo "Force pushing changes to origin/pages-only..."
            # Force push the updated local pages-only branch
            # This overwrites the remote pages-only branch with our new commit
            # based correctly on the previous pages-only state.
            git push --force origin pages-only
            echo "Push successful."
          else
            echo "No effective changes staged after checkout. Skipping commit and push."
          fi
        shell: bash
